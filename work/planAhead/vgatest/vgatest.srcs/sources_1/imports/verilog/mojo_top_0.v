/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg red,
    output reg green,
    output reg blue,
    output reg hsync,
    output reg vsync,
    input a_button,
    input u_button,
    input d_button,
    input r_button,
    input l_button
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [10:0] M_pixel_d, M_pixel_q = 1'h0;
  reg [10:0] M_line_d, M_line_q = 1'h0;
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  reg [10:0] M_userX_d, M_userX_q = 9'h190;
  reg [10:0] M_userY_d, M_userY_q = 9'h1e0;
  reg [22:0] M_timer_d, M_timer_q = 1'h0;
  reg [19:0] M_scheduler_d, M_scheduler_q = 1'h0;
  
  wire [32-1:0] M_alu_aluOUT;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [32-1:0] M_alu_a;
  reg [32-1:0] M_alu_b;
  aluLogic_2 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .aluOUT(M_alu_aluOUT),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_userChar_r;
  wire [1-1:0] M_userChar_g;
  wire [1-1:0] M_userChar_b;
  reg [11-1:0] M_userChar_charX;
  reg [11-1:0] M_userChar_charY;
  reg [11-1:0] M_userChar_cursorX;
  reg [11-1:0] M_userChar_cursorY;
  user_3 userChar (
    .charX(M_userChar_charX),
    .charY(M_userChar_charY),
    .cursorX(M_userChar_cursorX),
    .cursorY(M_userChar_cursorY),
    .r(M_userChar_r),
    .g(M_userChar_g),
    .b(M_userChar_b)
  );
  
  wire [11-1:0] M_enemyChar_enemyPosX;
  wire [11-1:0] M_enemyChar_enemyPosY;
  wire [1-1:0] M_enemyChar_r;
  wire [1-1:0] M_enemyChar_g;
  wire [1-1:0] M_enemyChar_b;
  reg [1-1:0] M_enemyChar_clk;
  reg [1-1:0] M_enemyChar_rst;
  reg [11-1:0] M_enemyChar_cursorX;
  reg [11-1:0] M_enemyChar_cursorY;
  enemy_4 enemyChar (
    .clk(M_enemyChar_clk),
    .rst(M_enemyChar_rst),
    .cursorX(M_enemyChar_cursorX),
    .cursorY(M_enemyChar_cursorY),
    .enemyPosX(M_enemyChar_enemyPosX),
    .enemyPosY(M_enemyChar_enemyPosY),
    .r(M_enemyChar_r),
    .g(M_enemyChar_g),
    .b(M_enemyChar_b)
  );
  
<<<<<<< HEAD
  wire [1-1:0] M_bg_r;
  wire [1-1:0] M_bg_g;
  wire [1-1:0] M_bg_b;
  reg [1-1:0] M_bg_clk;
  reg [1-1:0] M_bg_rst;
  reg [11-1:0] M_bg_cursorX;
  reg [11-1:0] M_bg_cursorY;
  background_5 bg (
    .clk(M_bg_clk),
    .rst(M_bg_rst),
    .cursorX(M_bg_cursorX),
    .cursorY(M_bg_cursorY),
    .r(M_bg_r),
    .g(M_bg_g),
    .b(M_bg_b)
=======
  wire [11-1:0] M_projChar_enemyPosX;
  wire [11-1:0] M_projChar_enemyPosY;
  wire [1-1:0] M_projChar_r;
  wire [1-1:0] M_projChar_g;
  wire [1-1:0] M_projChar_b;
  reg [1-1:0] M_projChar_clk;
  reg [1-1:0] M_projChar_rst;
  reg [11-1:0] M_projChar_cursorX;
  reg [11-1:0] M_projChar_cursorY;
  reg [11-1:0] M_projChar_startX;
  reg [11-1:0] M_projChar_startY;
  reg [1-1:0] M_projChar_hit;
  reg [1-1:0] M_projChar_shot;
  projectile_5 projChar (
    .clk(M_projChar_clk),
    .rst(M_projChar_rst),
    .cursorX(M_projChar_cursorX),
    .cursorY(M_projChar_cursorY),
    .startX(M_projChar_startX),
    .startY(M_projChar_startY),
    .hit(M_projChar_hit),
    .shot(M_projChar_shot),
    .enemyPosX(M_projChar_enemyPosX),
    .enemyPosY(M_projChar_enemyPosY),
    .r(M_projChar_r),
    .g(M_projChar_g),
    .b(M_projChar_b)
>>>>>>> b05042131424c56b29116a4c0f45329ed8e5fc44
  );
  
  always @* begin
<<<<<<< HEAD
    M_pixel_d = M_pixel_q;
=======
    M_scheduler_d = M_scheduler_q;
>>>>>>> 15905c84366596e4d896036833bdbc7d29eac06b
    M_timer_d = M_timer_q;
    M_line_d = M_line_q;
    M_userY_d = M_userY_q;
    M_userX_d = M_userX_q;
    
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 1'h0;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
<<<<<<< HEAD
    M_edge_detector_in = a_button;
=======
    M_scheduler_d = M_scheduler_q + 1'h1;
<<<<<<< HEAD
    M_bg_clk = clk;
    M_bg_rst = rst;
    M_bg_cursorX = 9'h12c;
    M_bg_cursorY = 9'h12c;
=======
>>>>>>> 15905c84366596e4d896036833bdbc7d29eac06b
>>>>>>> b05042131424c56b29116a4c0f45329ed8e5fc44
    M_enemyChar_cursorX = M_pixel_q;
    M_enemyChar_cursorY = M_line_q;
    M_enemyChar_clk = clk;
    M_enemyChar_rst = rst;
    M_projChar_clk = clk;
    M_projChar_rst = rst;
    M_projChar_cursorX = M_pixel_q;
    M_projChar_cursorY = M_line_q;
    M_projChar_hit = 1'h0;
    M_projChar_shot = 1'h0;
    M_userChar_cursorX = M_pixel_q;
    M_userChar_cursorY = M_line_q;
    M_timer_d = M_timer_q + 1'h1;
    M_userChar_charX = M_userX_q;
    M_userChar_charY = M_userY_q;
    if (M_scheduler_q == 20'h80000) begin
      if (u_button == 1'h1 && M_userY_q >= 9'h154) begin
        M_alu_a = {21'h000000, M_userY_q};
        M_alu_b = 2'h2;
        M_alu_alufn = 6'h01;
        M_userY_d = M_alu_aluOUT[0+10-:11];
        M_scheduler_d = 4'hb;
      end
    end
    if (M_scheduler_q == 19'h7ffff) begin
      if (d_button == 1'h1 && M_userY_q <= 10'h226) begin
        M_alu_a = {21'h000000, M_userY_q};
        M_alu_b = 2'h2;
        M_alu_alufn = 6'h00;
        M_userY_d = M_alu_aluOUT[0+10-:11];
        M_scheduler_d = 4'ha;
      end
    end
    if (M_scheduler_q == 19'h7fffe) begin
      if (l_button == 1'h1 && M_userX_q >= 6'h28) begin
        M_alu_a = {21'h000000, M_userX_q};
        M_alu_b = 2'h2;
        M_alu_alufn = 7'h01;
        M_userX_d = M_alu_aluOUT[0+10-:11];
        M_scheduler_d = 4'h9;
      end
    end
    if (M_scheduler_q == 19'h7fffd) begin
      if (r_button == 1'h1 && M_userX_q <= 10'h302) begin
        M_alu_a = {21'h000000, M_userX_q};
        M_alu_b = 2'h2;
        M_alu_alufn = 6'h00;
        M_userX_d = M_alu_aluOUT[0+10-:11];
        M_scheduler_d = 4'h8;
      end
    end
<<<<<<< HEAD
    M_projChar_startX = M_userX_q;
    M_projChar_startY = M_userY_q;
    if (M_edge_detector_out) begin
      M_projChar_shot = 1'h1;
    end
    M_userChar_charX = M_userX_q;
    M_userChar_charY = M_userY_q;
    if (M_pixel_q < 10'h320 && M_line_q < 10'h258) begin
      red = M_userChar_r + M_enemyChar_r + M_projChar_r;
      green = M_userChar_g + M_enemyChar_g + M_projChar_g;
      blue = M_userChar_b + M_enemyChar_b + M_projChar_b;
=======
    if (M_pixel_q < 10'h320 && M_line_q < 10'h258) begin
<<<<<<< HEAD
      red = M_bg_r || M_userChar_r || M_enemyChar_r;
      green = M_bg_g || M_userChar_g || M_enemyChar_g;
      blue = M_bg_b || M_userChar_b || M_enemyChar_b;
=======
      red = M_userChar_r || M_enemyChar_r;
      green = M_userChar_g || M_enemyChar_g;
      blue = M_userChar_b || M_enemyChar_b;
>>>>>>> 15905c84366596e4d896036833bdbc7d29eac06b
>>>>>>> b05042131424c56b29116a4c0f45329ed8e5fc44
    end else begin
      red = 1'h0;
      blue = 1'h0;
      green = 1'h0;
    end
    if (M_pixel_q >= 12'h357 && M_pixel_q <= 13'h03ce) begin
      hsync = 1'h1;
    end else begin
      hsync = 1'h0;
    end
    if (M_line_q >= 12'h27c && M_line_q <= 13'h0281) begin
      vsync = 1'h1;
    end else begin
      vsync = 1'h0;
    end
    if (M_pixel_q == 14'h040f) begin
      if (M_line_q == 14'h0299) begin
        M_line_d = 1'h0;
      end else begin
        M_line_d = M_line_q + 1'h1;
      end
      M_pixel_d = 1'h0;
    end else begin
      M_pixel_d = M_pixel_q + 1'h1;
    end
    led[0+4-:5] = {u_button, d_button, l_button, r_button, a_button};
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_timer_q <= 1'h0;
    end else begin
      M_timer_q <= M_timer_d;
    end
    
    if (rst == 1'b1) begin
<<<<<<< HEAD
=======
      M_userY_q <= 9'h1e0;
    end else begin
      M_userY_q <= M_userY_d;
    end
    
    M_pixel_q <= M_pixel_d;
    M_line_q <= M_line_d;
    
    if (rst == 1'b1) begin
<<<<<<< HEAD
      M_userX_q <= 9'h190;
    end else begin
      M_userX_q <= M_userX_d;
=======
>>>>>>> b05042131424c56b29116a4c0f45329ed8e5fc44
      M_scheduler_q <= 1'h0;
    end else begin
      M_scheduler_q <= M_scheduler_d;
>>>>>>> 15905c84366596e4d896036833bdbc7d29eac06b
    end
    
    if (rst == 1'b1) begin
      M_timer_q <= 1'h0;
    end else begin
      M_timer_q <= M_timer_d;
    end
    
    if (rst == 1'b1) begin
      M_userY_q <= 9'h1e0;
    end else begin
      M_userY_q <= M_userY_d;
    end
  end
  
endmodule
