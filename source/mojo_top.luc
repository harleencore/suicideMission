module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    
    output red,
    output green,
    output blue,
    output hsync,
    output vsync,
    
    input a_button,
    input u_button,
    input d_button,
    input r_button,
    input l_button
         
  ) {
  
  sig rst;                  // reset signal

  
  .clk(clk){
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff pixel[11];
    dff line[11];
    
    // User Variables
    dff userX[11](#INIT(400), .rst(rst));
    dff userY[11](#INIT(480), .rst(rst));
    dff hpCounter[4](#INIT(3), .rst(rst));

    // Score Show
    dff timeKeeper[24](#INIT(0), .rst(rst));
    dff scoreShow[20](#INIT(0), .rst(rst));

    dff timer[17](.rst(rst));
    fsm aluState(#INIT(STOP))= {U_BUTTON, D_BUTTON, L_BUTTON, R_BUTTON, A_BUTTON, STOP};
   
  }
  

  enemy enemyChar;
  projectile projChar;
  aluLogic alu;               // alu             
  user userChar;              // user sprite
  background bg;              // enemy sprite
  healthbar health;           // health bar on the side
  digits dig1;   
  digits dig2;
  digits dig3;   
  
  always {    
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = 8h00;               // turn LEDs off
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    
    // ALU INPUTS
    alu.a = 0;
    alu.b = 0;
    alu.alufn = 0;

    // BG element
    bg.clk = clk;
    bg.rst = rst;
    bg.cursorX = 300;
    bg.cursorY = 300;

    // Controlling Position enemy
    enemyChar.cursorX = pixel.q;
    enemyChar.cursorY = line.q;
    enemyChar.clk = clk;
    enemyChar.rst = rst;

    //Projectile Parameters
    projChar.clk = clk;
    projChar.rst = rst;
    projChar.cursorX = pixel.q;
    projChar.cursorY = line.q;
    projChar.startX = userX.q;
    projChar.startY = userY.q;
    projChar.hit = 0;
    projChar.shot = 0;
    
    //healthbar parameters
    health.clk = clk;
    health.rst = rst;
    health.cursorX = pixel.q;
    health.cursorY = line.q;
    health.hp = hpCounter.q; 
    
    // digits  (a - (a/b * b))
    dig1.clk = clk;
    dig1.rst = rst;
    dig1.cursorX = pixel.q;
    dig1.cursorY = line.q;
    dig1.charY = 40;
    dig1.charX = 770;
    dig1.dig = (scoreShow.q) - (((scoreShow.q)/10) * 10);
    
    
    dig2.clk = clk;
    dig2.rst = rst;
    dig2.cursorX = pixel.q;
    dig2.cursorY = line.q;
    dig2.charY = 40;
    dig2.charX = 740;
    dig2.dig = (scoreShow.q/10) - (((scoreShow.q/10)/10) * 10);
    
    
    dig3.clk = clk;
    dig3.rst = rst;
    dig3.cursorX = pixel.q;
    dig3.cursorY = line.q;
    dig3.charY = 40;
    dig3.charX = 710;
    dig3.dig = (scoreShow.q/100) - (((scoreShow.q/100)/10) * 10);
    
    // Controlling Position User
    // User Controls

    userChar.cursorX = pixel.q;
    userChar.cursorY = line.q;
    timer.d = timer.q + 1;          // Use timer to prevent the values from skyrocketting
    
    
    // Button control
    // Use timer to prevent the values from skyrocketting
    userChar.charX = userX.q;
    userChar.charY = userY.q;


    //Score Display
    timeKeeper.d = timeKeeper.q + 1;
    if(timeKeeper.q == 1){
      if(scoreShow.q != 999){
        scoreShow.d = scoreShow.q + 1;
      }
    }

    
    // ALU States
    // Button controls
    if(u_button == 1){
      aluState.d = aluState.U_BUTTON;
    }
    
    if(d_button == 1){
      aluState.d = aluState.D_BUTTON;
    }
    
    if(l_button == 1){    
      aluState.d = aluState.L_BUTTON;
    }
    
    if(r_button == 1){
      aluState.d = aluState.R_BUTTON;
    }
    
    if(a_button == 1){
      aluState.d = aluState.A_BUTTON;
    }
      
    
    if(timer.q == 1){
      case(aluState.q){
        aluState.U_BUTTON:
          if(userY.q >= 45){
            alu.a = c{21b0, userY.q};
            alu.b = 2;
            alu.alufn = b000001; // -
            userY.d = alu.aluOUT[10:0];
          }
          aluState.d = aluState.STOP;
          
        aluState.D_BUTTON:
          if(userY.q <= 550){
            alu.a = c{21b0, userY.q};
            alu.b = 2;
            alu.alufn = b000000; // +
            userY.d = alu.aluOUT[10:0];
          }  
          aluState.d = aluState.STOP;
          
        aluState.L_BUTTON:
          if(userX.q >= 40){
            alu.a = c{21b0, userX.q};
            alu.b = 2;
            alu.alufn = b0000001; // -
            userX.d = alu.aluOUT[10:0];          
          } 
          aluState.d = aluState.STOP;
          
        aluState.R_BUTTON:
          if(userX.q <= 770){
            alu.a = c{21b0, userX.q};
            alu.b = 2;
            alu.alufn = b000000; // + 
            userX.d = alu.aluOUT[10:0];
          }
          aluState.d = aluState.STOP;
          
        aluState.A_BUTTON:
          alu.a = a_button;
          alu.b = 1;
          alu.alufn = b110011; //CMPEQ
          
          if(alu.aluOUT == 1){
            projChar.startX = userX.q;
            projChar.startY = userY.q;
            projChar.shot = 1;
          }
          aluState.d = aluState.STOP;
          
        aluState.STOP:
          userX.d = userX.q;
          userY.d = userY.q;
          
      }
    }

    
  
    // Displaying Graphics
    if (pixel.q < 800 && line.q < 600) {
      red = bg.r || userChar.r || enemyChar.r || projChar.r || health.r || dig1.r || dig2.r || dig3.r;
      green = bg.g || userChar.g || enemyChar.g || projChar.g || health.g || dig1.g || dig2.g || dig3.g;
      blue = bg.b || userChar.b || enemyChar.b || projChar.b || health.b || dig1.b || dig2.b || dig3.b;


    } else {
      // outside visible frame
      red = 0;
      blue = 0;
      green = 0;
    }
      
      
  // horizontal sync
  if (pixel.q >= 800+56-1 && pixel.q <= 800+56-1+119) {
    hsync = 1;
  } else {
    hsync = 0;
  }

  // vertical refresh
  if (line.q >= 600+37-1 && line.q <= 600+37-1+5) {
    vsync = 1;
  } else {
    vsync = 0;
  }

  // advance pixel and line counters
  if (pixel.q == 800+56+120+64-1) {
    if (line.q == 600+37+6+23-1) {
      line.d = 0;
    } else {
      line.d = line.q + 1;
    }
    pixel.d = 0;
  } else {
    pixel.d = pixel.q + 1;
  }
    
  led[4:0] = c{u_button, d_button, l_button, r_button, a_button};
  }
}
