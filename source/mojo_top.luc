module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    
    output red,
    output green,
    output blue,
    output hsync,
    output vsync,
    
    input a_button,
    input u_button,
    input d_button,
    input r_button,
    input l_button
         
  ) {
  
  sig rst;                  // reset signal

  
  .clk(clk){
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff pixel[11];
    dff line[11];
    
    // User Variables
    dff userX[11](#INIT(400), .rst(rst));
    dff userY[11](#INIT(480), .rst(rst));
    dff hpCounter[3](#INIT(3), .rst(rst));
    
    // Enemy Variables
    dff enemyShoot[1];

    // Score Show
    dff timeKeeper[24](#INIT(0), .rst(rst));
    dff scoreShow[11](#INIT(0), .rst(rst));

    dff timer[17](.rst(rst));
    dff timer2[21](.rst(rst));
    fsm aluState(#INIT(STOP))= {U_BUTTON, D_BUTTON, L_BUTTON, R_BUTTON, A_BUTTON, STOP};

    fsm gameState(#INIT(START)) = {START, PLAY}; 
   
  }
  

  enemy enemyChar;
  projectile projChar;
  aluLogic alu;               // alu             
  user userChar;              // user sprite
  background bg;              // enemy sprite
  healthbar health;           // health bar on the side
  digits dig1;   
  digits dig2;
  digits dig3;

  enemyProjU enemyU;
  enemyProjD enemyD;

  enemy_hit enemyhits;   
  user_hit userhits;
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
        
    led = 8h00;               // turn LEDs off
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
            
    // ALU INPUTS
    alu.a = 0;
    alu.b = 0;
    alu.alufn = 0;

    // BG element
    bg.clk = clk;
    bg.rst = rst;
    bg.cursorX = 300;
    bg.cursorY = 300;
    bg.play = 0;

    // Controlling Position enemy
    enemyChar.cursorX = pixel.q;
    enemyChar.cursorY = line.q;
    enemyChar.clk = clk;
    enemyChar.rst = rst;
    enemyChar.play = 0;
        
    // Enemy Proj
    enemyU.clk = clk;
    enemyU.rst = rst;
    enemyU.cursorX = pixel.q;
    enemyU.cursorY = line.q;
    enemyU.startX = enemyChar.enemyPosX;
    enemyU.startY = enemyChar.enemyPosY;
    enemyU.hit = 0;
    enemyU.shot = enemyShoot.q;
        
    enemyD.clk = clk;
    enemyD.rst = rst;
    enemyD.cursorX = pixel.q;
    enemyD.cursorY = line.q;
    enemyD.startX = enemyChar.enemyPosX;
    enemyD.startY = enemyChar.enemyPosY;
    enemyD.hit = 0;
    enemyD.shot = enemyShoot.q;
        
    //Projectile Parameters
    projChar.clk = clk;
    projChar.rst = rst;
    projChar.cursorX = pixel.q;
    projChar.cursorY = line.q;
    projChar.startX = userX.q;
    projChar.startY = userY.q;
    projChar.hit = 0;
    projChar.shot = 0;
        
    //healthbar parameters
    health.clk = clk;
    health.rst = rst;
    health.cursorX = pixel.q;
    health.cursorY = line.q;
    health.hp = hpCounter.q; 
        
    // digits  (a - (a/b * b))
    dig1.clk = clk;
    dig1.rst = rst;
    dig1.cursorX = pixel.q;
    dig1.cursorY = line.q;
    dig1.charY = 40;
    dig1.charX = 770;
    dig1.dig = 13; // blank default
        
        
    dig2.clk = clk;
    dig2.rst = rst;
    dig2.cursorX = pixel.q;
    dig2.cursorY = line.q;
    dig2.charY = 40;
    dig2.charX = 740;
    dig2.dig = 13; // blank default
        
        
    dig3.clk = clk;
    dig3.rst = rst;
    dig3.cursorX = pixel.q;
    dig3.cursorY = line.q;
    dig3.charY = 40;
    dig3.charX = 710;
    dig3.dig = 13; //blank default
        
    //Collision Detection Variable Enemy
    enemyhits.enemy_x = enemyChar.enemyPosX;
    enemyhits.enemy_y = enemyChar.enemyPosY;
    enemyhits.pellet_x = projChar.projPosX;
    enemyhits.pellet_y = projChar.projPosY;
        
    // Collision Detection Variable user
    userhits.user_x = userX.q;
    userhits.user_y = userY.q;
    userhits.pellet1_x = enemyU.projPosX;
    userhits.pellet1_y = enemyU.projPosY;
    userhits.pellet2_x = enemyD.projPosX;
    userhits.pellet2_y = enemyD.projPosY;
    userhits.enemy_x = enemyChar.enemyPosX;
    userhits.enemy_y = enemyChar.enemyPosY; 
        
         
    // Controlling Position User
    // User Controls

    userChar.cursorX = pixel.q;
    userChar.cursorY = line.q;
    timer.d = timer.q + 1;          // Use timer to prevent the values from skyrocketting
    timer2.d = timer2.q + 1;
    timeKeeper.d = timeKeeper.q + 1;

        
        
    // Button control
    // Use timer to prevent the values from skyrocketting
    userChar.charX = userX.q;
    userChar.charY = userY.q;


    case(gameState.q){
      gameState.START:
        // put everything off screen
        enemyD.startX = 900;
        enemyD.startY = 900;
        enemyU.startX = 900;
        enemyU.startY = 900;
        userChar.charX = 900;
        userChar.charY = 900;
        enemyChar.play = 0;
        bg.play = 0;
        hpCounter.d = 0;
        scoreShow.d = 0;
        if(a_button == 1){
          gameState.d = gameState.PLAY;
          hpCounter.d = 3;
          userChar.charX = 400;
          userChar.charY = 480;
          enemyChar.play = 1;
          bg.play = 1;
        }
        

      gameState.PLAY:

        // ALU INPUTS
        alu.a = 0;
        alu.b = 0;
        alu.alufn = 0;

        // BG element
        bg.clk = clk;
        bg.rst = rst;
        bg.cursorX = 300;
        bg.cursorY = 300;
        bg.play = 1;

        // Controlling Position enemy
        enemyChar.cursorX = pixel.q;
        enemyChar.cursorY = line.q;
        enemyChar.clk = clk;
        enemyChar.rst = rst;
        enemyChar.play = 1;
        
        // Enemy Proj
        enemyU.clk = clk;
        enemyU.rst = rst;
        enemyU.cursorX = pixel.q;
        enemyU.cursorY = line.q;
        enemyU.startX = enemyChar.enemyPosX;
        enemyU.startY = enemyChar.enemyPosY;
        enemyU.hit = 0;
        enemyU.shot = enemyShoot.q;
        
        enemyD.clk = clk;
        enemyD.rst = rst;
        enemyD.cursorX = pixel.q;
        enemyD.cursorY = line.q;
        enemyD.startX = enemyChar.enemyPosX;
        enemyD.startY = enemyChar.enemyPosY;
        enemyD.hit = 0;
        enemyD.shot = enemyShoot.q;
        
        //Projectile Parameters
        projChar.clk = clk;
        projChar.rst = rst;
        projChar.cursorX = pixel.q;
        projChar.cursorY = line.q;
        projChar.startX = userX.q;
        projChar.startY = userY.q;
        projChar.hit = 0;
        projChar.shot = 0;
        
        //healthbar parameters
        health.clk = clk;
        health.rst = rst;
        health.cursorX = pixel.q;
        health.cursorY = line.q;
        health.hp = hpCounter.q; 
        
        // digits  (a - (a/b * b))
        dig1.clk = clk;
        dig1.rst = rst;
        dig1.cursorX = pixel.q;
        dig1.cursorY = line.q;
        dig1.charY = 40;
        dig1.charX = 770;
        dig1.dig = (scoreShow.q) - (((scoreShow.q)/10) * 10);
        
        
        dig2.clk = clk;
        dig2.rst = rst;
        dig2.cursorX = pixel.q;
        dig2.cursorY = line.q;
        dig2.charY = 40;
        dig2.charX = 740;
        dig2.dig = (scoreShow.q/10) - (((scoreShow.q/10)/10) * 10);
        
        
        dig3.clk = clk;
        dig3.rst = rst;
        dig3.cursorX = pixel.q;
        dig3.cursorY = line.q;
        dig3.charY = 40;
        dig3.charX = 710;
        dig3.dig = (scoreShow.q/100) - (((scoreShow.q/100)/10) * 10);
        
        //Collision Detection Variable Enemy
        enemyhits.enemy_x = enemyChar.enemyPosX;
        enemyhits.enemy_y = enemyChar.enemyPosY;
        enemyhits.pellet_x = projChar.projPosX;
        enemyhits.pellet_y = projChar.projPosY;
        
        // Collision Detection Variable user
        userhits.user_x = userX.q;
        userhits.user_y = userY.q;
        userhits.pellet1_x = enemyU.projPosX;
        userhits.pellet1_y = enemyU.projPosY;
        userhits.pellet2_x = enemyD.projPosX;
        userhits.pellet2_y = enemyD.projPosY;
        userhits.enemy_x = enemyChar.enemyPosX;
        userhits.enemy_y = enemyChar.enemyPosY; 
        
         
        // Controlling Position User
        // User Controls

        userChar.cursorX = pixel.q;
        userChar.cursorY = line.q;        
        
        // Button control
        // Use timer to prevent the values from skyrocketting
        userChar.charX = userX.q;
        userChar.charY = userY.q;


        // Score Display
        if(timeKeeper.q == 1){
          if(scoreShow.q < 999){
            scoreShow.d = scoreShow.q + 1;
          } else {
            // end game 
            gameState.d = gameState.START;
            enemyChar.play = 0;
            bg.play = 0;
          }
        }
        
        if(timer2.q == 1){
          if(enemyhits.enemy_hit_status == 1){
            if(scoreShow.q < 968){
              scoreShow.d = scoreShow.q + 30; // Increase score
            }
          }
          if(userhits.user_hit_status == 1){
            if(hpCounter.q > 0){
              hpCounter.d = hpCounter.q - 1;
            } else {
              gameState.d = gameState.START;
              enemyChar.play = 0;
              bg.play = 0;
            }
          }
        }
        
        
        // ALU States
        // Button controls
        if(u_button == 1){
          aluState.d = aluState.U_BUTTON;
        }
        
        if(d_button == 1){
          aluState.d = aluState.D_BUTTON;
        }
        
        if(l_button == 1){    
          aluState.d = aluState.L_BUTTON;
        }
        
        if(r_button == 1){
          aluState.d = aluState.R_BUTTON;
        }
        
        if(a_button == 1){
          aluState.d = aluState.A_BUTTON;
        }
          
        
        if(timer.q == 1){

          enemyShoot.d = enemyShoot.q + 1; // enemy shoot

          case(aluState.q){
            aluState.U_BUTTON:
              if(userY.q >= 45){
                alu.a = c{21b0, userY.q};
                alu.b = 2;
                alu.alufn = b000001; // -
                userY.d = alu.aluOUT[10:0];
              }
              aluState.d = aluState.STOP;
              
            aluState.D_BUTTON:
              if(userY.q <= 550){
                alu.a = c{21b0, userY.q};
                alu.b = 2;
                alu.alufn = b000000; // +
                userY.d = alu.aluOUT[10:0];
              }  
              aluState.d = aluState.STOP;
              
            aluState.L_BUTTON:
              if(userX.q >= 40){
                alu.a = c{21b0, userX.q};
                alu.b = 2;
                alu.alufn = b0000001; // -
                userX.d = alu.aluOUT[10:0];          
              } 
              aluState.d = aluState.STOP;
              
            aluState.R_BUTTON:
              if(userX.q <= 770){
                alu.a = c{21b0, userX.q};
                alu.b = 2;
                alu.alufn = b000000; // + 
                userX.d = alu.aluOUT[10:0];
              }
              aluState.d = aluState.STOP;
              
            aluState.A_BUTTON:
              alu.a = a_button;
              alu.b = 1;
              alu.alufn = b110011; //CMPEQ
              
              if(alu.aluOUT == 1){
                projChar.startX = userX.q;
                projChar.startY = userY.q;
                projChar.shot = 1;
              }
              aluState.d = aluState.STOP;
              
            aluState.STOP:
              userX.d = userX.q;
              userY.d = userY.q;
              
          }
        }
    }
  
    // Displaying Graphics
    if (pixel.q < 800 && line.q < 600) {
      red = bg.r || userChar.r || enemyChar.r || projChar.r || health.r || dig1.r || dig2.r || dig3.r || enemyU.r || enemyD.r;
      green = bg.g || userChar.g || enemyChar.g || projChar.g || health.g || dig1.g || dig2.g || dig3.g || enemyU.g || enemyD.g;
      blue = bg.b || userChar.b || enemyChar.b || projChar.b || health.b || dig1.b || dig2.b || dig3.b || enemyU.b || enemyD.b;

    } else {
      // outside visible frame
      red = 0;
      blue = 0;
      green = 0;
    }
      
      
  // horizontal sync
  if (pixel.q >= 800+56-1 && pixel.q <= 800+56-1+119) {
    hsync = 1;
  } else {
    hsync = 0;
  }

  // vertical refresh
  if (line.q >= 600+37-1 && line.q <= 600+37-1+5) {
    vsync = 1;
  } else {
    vsync = 0;
  }

  // advance pixel and line counters
  if (pixel.q == 800+56+120+64-1) {
    if (line.q == 600+37+6+23-1) {
      line.d = 0;
    } else {
      line.d = line.q + 1;
    }
    pixel.d = 0;
  } else {
    pixel.d = pixel.q + 1;
  }
    
  led[4:0] = c{u_button, d_button, l_button, r_button, a_button};
  }
}
