module aluLogic (
    input alufn[6],
    input a[32],
    input b[32],
    output aluOUT[32],
    output z,
    output v,
    output n      
  ) {

    // instantiating modules
    aluADD add;
    aluBOOL bool;
    aluCOMP comp;
    aluSHIFT shift;
    
  always {
  // ===============================================================
  // ALU OPCODES
  // ===============================================================
  // 
  // ADD            000000
  // SUB            000001
  // MUL            000010
  // MOD            000011
  // A AND B        011000
  // A OR  B        011110
  // A XOR B        010110
  // "A" LDR        011010
  // ~A AND B       010100
  // "B" LDR        011100
  // A AND ~B       010010
  // A NOR B        010001
  // A XNOR B       011001
  // ~A             010101
  // ~A OR B        011101
  // ~B             010011
  // A OR ~B        011011
  // A NAND B       010111
  // ALL 1          011111
  // A SHL B        100000
  // A SHR B        100001
  // A SRA B        100011
  // CMPEQ          110011
  // CMPLT          110101
  // CMPLE          110111
    
    
    
    // assignment of variables
    // ADD inputs
    add.a = a;
    add.b = b;
    add.alufn = alufn;
    
    // BOOL inputs
    bool.a = a;
    bool.b = b;
    bool.alufn = alufn;
    
    // COMP inputs
    comp.z = add.z;
    comp.v = add.v;
    comp.n = add.n;
    comp.alufn = alufn;
   
    // SHIFT inputs
    shift.a = a;
    shift.b = b;
    shift.alufn = alufn;
    
    // ALU OUTPUTS
    // Follow lab3_ALU conventions
    case(alufn[5:4]){
      b00:
        aluOUT = add.out;
        
      b01:
        aluOUT = bool.out;
        
      b10:
        aluOUT = shift.out;
        
      b11:
        aluOUT = comp.out;
      
      default:
        aluOUT = 32b0;
      }  
    
    // Overflow Display
    z = add.z;
    v = add.v;
    n = add.n;    
  }
}

